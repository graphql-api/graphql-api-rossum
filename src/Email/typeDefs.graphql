# import Node, RossumEntity from '../Node.graphql'
# import URL, JSON, EmailAddress, DateTime from '../Scalars.graphql'
# import RossumDocument from '../Document/typeDefs.graphql'

type RossumInbox implements Node & RossumEntity @key(fields: "id") {
  id: ID!
  name: String
  url: URL!
  email: EmailAddress
  email_prefix: String
  bounce_email_to: EmailAddress
  bounce_unprocessable_attachments: Boolean
  bounce_deleted_annotations: Boolean
  bounce_email_with_no_attachments: Boolean
  queues: [URL]
}

enum RossumEmailType {
  outgoing
  incoming
}

type RossumEmailParticipant {
  email: EmailAddress
  name: String
}

type RossumEmail implements Node & RossumEntity @key(fields: "id") {
  id: ID!
  url: URL!
  inbox: RossumInbox
  parent: RossumEmail
  arrived_at: DateTime
  subject: String
  body_text_plain: String
  body_text_html: String
  type: RossumEmailType
  bcc: [RossumEmailParticipant]
  cc: [RossumEmailParticipant]
  to: [RossumEmailParticipant]
  from: RossumEmailParticipant
  children: [RossumEmail]
  documents: [RossumDocument]
  metadata: JSON
}

type Query {
  listInboxes(input: ListRossumInboxesInput): [RossumInbox]
  retrieveInbox: RossumInbox
  listEmails: [RossumEmail]
  retrieveEmail: RossumEmail
}

input ListRossumInboxesInput {
  filter: ListRossumInboxesFilterInput
}

input ListRossumInboxesFilterInput {
  id: ID
  name: String
  email: EmailAddress
  email_prefix: String
  bounce_email_to: EmailAddress
  bounce_unprocessable_attachments: Boolean
  bounce_postponed_annotations: Boolean
  bounce_deleted_annotations: Boolean
}

type Mutation {
  createInbox: RossumInbox
  updateInbox: RossumInbox
  deleteInbox: RossumInbox
  createEmail: RossumEmail
  updateEmail: RossumEmail
  sendEmail: RossumEmail
}
