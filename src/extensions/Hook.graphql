# import Node, RossumEntity from '../Node.graphql'
# import URL, JSON, EmailAddress, DateTime from '../Scalars.graphql'
# import RossumQueue from '../Queue/typeDefs.graphql'

type RossumHookConfig {
  url: String
  secret: String
  insecure_ssl: Boolean
  client_ssl_certificate: String
}

enum RossumHookType {
  webhook
  function
}

enum RossumHookEvent {
  annotation_status
  annotation_status__changed
  annotation_content
  annotation_content__initialize
  annotation_content__user_update
  """
  annotation_content.export
  """
  annotation_content__export
  """
  email.received
  """
  email
  email__received
}

type RossumHook implements Node & RossumEntity @key(fields: "id") {
  id: ID!
  url: URL!
  type: RossumHookType
  name: String
  active: Boolean
  config: RossumHookConfig
  events: [RossumHookEvent]
  sideload: [String]
  run_after: [String]
  queues: [RossumQueue]
}

type Query {
  listHooks: [RossumHook]
  retrieveHook: RossumHook
}

type Mutation {
  createHook(input: CreateRossumHookInput!): RossumHook
  updateHook(input: UpdateRossumHookInput!): RossumHook
  deleteHook(input: DeleteRossumHookInput!): RossumHook
  testHook(input: TestRossumHookInput): TestRossumHookResponse
}

type TestRossumHookResponse {
  detail: String
}

input CreateRossumHookInput {
  name: String
  queues: [URL]
  config: RossumHookConfigInput
  events: [RossumHookEvent]
}

input UpdateRossumHookInput {
  id: ID!
  name: String
  queues: [URL]
  config: RossumHookConfigInput
  events: [RossumHookEvent]
}

input RossumHookConfigInput {
  url: String
  secret: String
  insecure_ssl: Boolean
  client_ssl_certificate: String
}

input DeleteRossumHookInput {
  id: ID!
}

input TestRossumHookInput {
  config: RossumHookConfigInput
  payload: TestRossumHookPayloadInput!
}

"""
Payload sent to the Hook, please note only supported combination of action and event can be passed.
"""
input TestRossumHookPayloadInput {
  action: String
  event: RossumHookEvent
  annotation: JSON
  document: JSON
  settings: JSON
}
